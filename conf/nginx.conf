
#user  nobody;
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  text/html;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;
    gzip_min_length 1024;
    gzip_buffers 4 16k;
    gzip_comp_level 2;
    gzip_types text/plain application/x-javascript text/css application/xml;
    gzip_vary on;
    gzip_disable "MSIE[1-6]\.";
    gunzip on;
    rewrite_log on;

#################################use proxy_cache for cache###############################
    proxy_cache_path /myweb/server/proxycache levels=1:2 keys_zone=MYPROXYCACHE:10m inactive=1m max_size=20m loader_files=100 loader_sleep=1m loader_threshold=200ms;
    proxy_temp_path /myweb/server/tmp;
#################################end proxy_cache for cache###############################

    server {
        listen       5000;
        server_name  myserver1;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
#################################use proxy_cache for cache###############################
        location /proxy-cache-test {
            proxy_pass http://www.myweb.name/;
            proxy_cache MYPROXYCACHE;           #配置使用MYPROXYCACHE这个keys_zone
            proxy_cache_valid 200 302 1h;       #配置200状态和302状态的响应缓存1小时
            proxy_cache_valid 301 1d;           #配置301状态的响应缓存1天
            proxy_cache_valid any 1m;           #配置其他状态的响应数据缓存1分钟
        }



#################################end proxy_cache for cache###############################


        location /test-proxy-pass/test-return {
            proxy_pass http://0.0.0.0:5001/;
        }

        location /test-return {
            return 200 "hello world\n";
        }

        location /test-rewrite {
            # return 200 $request_uri;
            # return 200 $uri;
            # return 200 $args;
            # rewrite ^(/test) http://0.0.0.0:5000$1-return;
            rewrite ^(/test) $1-return ;
        }
        
###################################use proxy_store for cache#########################
        #404 error drive cache mechanism
        location /error-drive-cache-test {
            root /myweb/server/;
            error_page 404 =200 /errpage$request_uri;
        }

        location /errpage/ {
            internal;    #该目录不能通过外部链接直接访问
            alias /home/html/;
            proxy_pass http://backend/;
            proxy_set_header Accept-Encoding '';   #后端不返回压缩（gzip、deflate）
            proxy_store on;                        #指定nginx将代理返回的文件保存
            proxy_store_access user:rw group:rw all:r; #配置缓存数据的访问权限
            proxy_temp_path /myweb/server/tmp; #配置临时目录，该目录要和/myweb/server/在同一个硬盘分区内
        }

        #doesn't exist drive cache mechanism
        location /non-exist-drive-cache-test {
            root /home/html;
            alias /myweb/server/;
            if (!-f $request_filename)
            {
                proxy_pass http://backend/;
            }
        }
###################################end use proxy_store for cache######################

##################################use memcached for cache#############################
        location /memcached-cache-test {
            set $memcached_key "$uri?$args"; #会使用这个key去memcached中查询缓存
            memcached_pass 0.0.0.0:8080;
            error_page 404 52 504 = @fallback;
        }

        location @fallback {
            proxy_pass http://backend;
        }
#################################end use memcached for cache#############################

        location / {
            root   html;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
    server {
        listen       5001;
        server_name  myserver2;

        location ^.* {
            return 200 $request_uri;
        }

        location /test-proxy-pass/test-return {
            return 200 " 5001 hello world\n";
        }

        location / {
            return 200 $request_uri;
            root   html;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
